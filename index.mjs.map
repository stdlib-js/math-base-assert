{"version":3,"file":"index.mjs","sources":["../lib/index.js"],"sourcesContent":["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/*\n* When adding modules to the namespace, ensure that they are added in alphabetical order according to module name.\n*/\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils-define-read-only-property' );\n\n\n// MAIN //\n\n/**\n* Top-level namespace.\n*\n* @namespace ns\n*/\nvar ns = {};\n\n/**\n* @name isEvenInt32\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/math/base/assert/int32-is-even}\n*/\nsetReadOnly( ns, 'isEvenInt32', require( '@stdlib/math-base-assert-int32-is-even' ) );\n\n/**\n* @name isOddInt32\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/math/base/assert/int32-is-odd}\n*/\nsetReadOnly( ns, 'isOddInt32', require( '@stdlib/math-base-assert-int32-is-odd' ) );\n\n/**\n* @name isComposite\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/math/base/assert/is-composite}\n*/\nsetReadOnly( ns, 'isComposite', require( '@stdlib/math-base-assert-is-composite' ) );\n\n/**\n* @name isCoprime\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/math/base/assert/is-coprime}\n*/\nsetReadOnly( ns, 'isCoprime', require( '@stdlib/math-base-assert-is-coprime' ) );\n\n/**\n* @name isEven\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/math/base/assert/is-even}\n*/\nsetReadOnly( ns, 'isEven', require( '@stdlib/math-base-assert-is-even' ) );\n\n/**\n* @name isFinite\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/math/base/assert/is-finite}\n*/\nsetReadOnly( ns, 'isFinite', require( '@stdlib/math-base-assert-is-finite' ) );\n\n/**\n* @name isFinitef\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/math/base/assert/is-finitef}\n*/\nsetReadOnly( ns, 'isFinitef', require( '@stdlib/math-base-assert-is-finitef' ) );\n\n/**\n* @name isInfinite\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/math/base/assert/is-infinite}\n*/\nsetReadOnly( ns, 'isInfinite', require( '@stdlib/math-base-assert-is-infinite' ) );\n\n/**\n* @name isInfinitef\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/math/base/assert/is-infinitef}\n*/\nsetReadOnly( ns, 'isInfinitef', require( '@stdlib/math-base-assert-is-infinitef' ) );\n\n/**\n* @name isInteger\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/math/base/assert/is-integer}\n*/\nsetReadOnly( ns, 'isInteger', require( '@stdlib/math-base-assert-is-integer' ) );\n\n/**\n* @name isnan\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/math/base/assert/is-nan}\n*/\nsetReadOnly( ns, 'isnan', require( '@stdlib/math-base-assert-is-nan' ) );\n\n/**\n* @name isnanf\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/math/base/assert/is-nanf}\n*/\nsetReadOnly( ns, 'isnanf', require( '@stdlib/math-base-assert-is-nanf' ) );\n\n/**\n* @name isNegativeInteger\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/math/base/assert/is-negative-integer}\n*/\nsetReadOnly( ns, 'isNegativeInteger', require( '@stdlib/math-base-assert-is-negative-integer' ) );\n\n/**\n* @name isNegativeZero\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/math/base/assert/is-negative-zero}\n*/\nsetReadOnly( ns, 'isNegativeZero', require( '@stdlib/math-base-assert-is-negative-zero' ) );\n\n/**\n* @name isNegativeZerof\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/math/base/assert/is-negative-zerof}\n*/\nsetReadOnly( ns, 'isNegativeZerof', require( '@stdlib/math-base-assert-is-negative-zerof' ) );\n\n/**\n* @name isNonNegativeInteger\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/math/base/assert/is-nonnegative-integer}\n*/\nsetReadOnly( ns, 'isNonNegativeInteger', require( '@stdlib/math-base-assert-is-nonnegative-integer' ) );\n\n/**\n* @name isNonPositiveInteger\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/math/base/assert/is-nonpositive-integer}\n*/\nsetReadOnly( ns, 'isNonPositiveInteger', require( '@stdlib/math-base-assert-is-nonpositive-integer' ) );\n\n/**\n* @name isOdd\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/math/base/assert/is-odd}\n*/\nsetReadOnly( ns, 'isOdd', require( '@stdlib/math-base-assert-is-odd' ) );\n\n/**\n* @name isPositiveInteger\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/math/base/assert/is-positive-integer}\n*/\nsetReadOnly( ns, 'isPositiveInteger', require( '@stdlib/math-base-assert-is-positive-integer' ) );\n\n/**\n* @name isPositiveZero\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/math/base/assert/is-positive-zero}\n*/\nsetReadOnly( ns, 'isPositiveZero', require( '@stdlib/math-base-assert-is-positive-zero' ) );\n\n/**\n* @name isPositiveZerof\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/math/base/assert/is-positive-zerof}\n*/\nsetReadOnly( ns, 'isPositiveZerof', require( '@stdlib/math-base-assert-is-positive-zerof' ) );\n\n/**\n* @name isPrime\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/math/base/assert/is-prime}\n*/\nsetReadOnly( ns, 'isPrime', require( '@stdlib/math-base-assert-is-prime' ) );\n\n/**\n* @name isProbability\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/math/base/assert/is-probability}\n*/\nsetReadOnly( ns, 'isProbability', require( '@stdlib/math-base-assert-is-probability' ) );\n\n/**\n* @name isSafeInteger\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/math/base/assert/is-safe-integer}\n*/\nsetReadOnly( ns, 'isSafeInteger', require( '@stdlib/math-base-assert-is-safe-integer' ) );\n\n/**\n* @name isPow2Uint32\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/math/base/assert/uint32-is-pow2}\n*/\nsetReadOnly( ns, 'isPow2Uint32', require( '@stdlib/math-base-assert-uint32-is-pow2' ) );\n\n\n// EXPORTS //\n\nmodule.exports = ns;\n"],"names":["setReadOnly","require$$0","ns","require$$1","require$$2","require$$3","require$$4","require$$5","require$$6","require$$7","require$$8","require$$9","require$$10","require$$11","require$$12","require$$13","require$$14","require$$15","require$$16","require$$17","require$$18","require$$19","require$$20","require$$21","require$$22","require$$23","require$$24","require$$25","lib"],"mappings":";;85KA0BA,IAAAA,EAAAC,EAUAC,EAAA,GASAF,EAAAE,EAAA,cAAAC,GASAH,EAAAE,EAAA,aAAAE,GASAJ,EAAAE,EAAA,cAAAG,GASAL,EAAAE,EAAA,YAAAI,GASAN,EAAAE,EAAA,SAAAK,GASAP,EAAAE,EAAA,WAAAM,GASAR,EAAAE,EAAA,YAAAO,GASAT,EAAAE,EAAA,aAAAQ,GASAV,EAAAE,EAAA,cAAAS,GASAX,EAAAE,EAAA,YAAAU,GASAZ,EAAAE,EAAA,QAAAW,GASAb,EAAAE,EAAA,SAAAY,GASAd,EAAAE,EAAA,oBAAAa,GASAf,EAAAE,EAAA,iBAAAc,GASAhB,EAAAE,EAAA,kBAAAe,GASAjB,EAAAE,EAAA,uBAAAgB,GASAlB,EAAAE,EAAA,uBAAAiB,GASAnB,EAAAE,EAAA,QAAAkB,GASApB,EAAAE,EAAA,oBAAAmB,GASArB,EAAAE,EAAA,iBAAAoB,GASAtB,EAAAE,EAAA,kBAAAqB,GASAvB,EAAAE,EAAA,UAAAsB,GASAxB,EAAAE,EAAA,gBAAAuB,GASAzB,EAAAE,EAAA,gBAAAwB,GASA1B,EAAAE,EAAA,eAAAyB,GAKA,IAAAC,EAAA1B"}