{"version":3,"file":"index.mjs","sources":["../lib/index.js"],"sourcesContent":["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/*\n* When adding modules to the namespace, ensure that they are added in alphabetical order according to module name.\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-read-only-property';\n\n\n// MAIN //\n\n/**\n* Top-level namespace.\n*\n* @namespace ns\n*/\nvar ns = {};\n\n/**\n* @name isEvenInt32\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/math/base/assert/int32-is-even}\n*/\nimport isEvenInt32 from '@stdlib/math-base-assert-int32-is-even';\nsetReadOnly( ns, 'isEvenInt32', isEvenInt32 );\n\n/**\n* @name isOddInt32\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/math/base/assert/int32-is-odd}\n*/\nimport isOddInt32 from '@stdlib/math-base-assert-int32-is-odd';\nsetReadOnly( ns, 'isOddInt32', isOddInt32 );\n\n/**\n* @name isComposite\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/math/base/assert/is-composite}\n*/\nimport isComposite from '@stdlib/math-base-assert-is-composite';\nsetReadOnly( ns, 'isComposite', isComposite );\n\n/**\n* @name isCoprime\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/math/base/assert/is-coprime}\n*/\nimport isCoprime from '@stdlib/math-base-assert-is-coprime';\nsetReadOnly( ns, 'isCoprime', isCoprime );\n\n/**\n* @name isEven\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/math/base/assert/is-even}\n*/\nimport isEven from '@stdlib/math-base-assert-is-even';\nsetReadOnly( ns, 'isEven', isEven );\n\n/**\n* @name isFinite\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/math/base/assert/is-finite}\n*/\nimport isFinite from '@stdlib/math-base-assert-is-finite';\nsetReadOnly( ns, 'isFinite', isFinite );\n\n/**\n* @name isFinitef\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/math/base/assert/is-finitef}\n*/\nimport isFinitef from '@stdlib/math-base-assert-is-finitef';\nsetReadOnly( ns, 'isFinitef', isFinitef );\n\n/**\n* @name isInfinite\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/math/base/assert/is-infinite}\n*/\nimport isInfinite from '@stdlib/math-base-assert-is-infinite';\nsetReadOnly( ns, 'isInfinite', isInfinite );\n\n/**\n* @name isInfinitef\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/math/base/assert/is-infinitef}\n*/\nimport isInfinitef from '@stdlib/math-base-assert-is-infinitef';\nsetReadOnly( ns, 'isInfinitef', isInfinitef );\n\n/**\n* @name isInteger\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/math/base/assert/is-integer}\n*/\nimport isInteger from '@stdlib/math-base-assert-is-integer';\nsetReadOnly( ns, 'isInteger', isInteger );\n\n/**\n* @name isnan\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/math/base/assert/is-nan}\n*/\nimport isnan from '@stdlib/math-base-assert-is-nan';\nsetReadOnly( ns, 'isnan', isnan );\n\n/**\n* @name isnanf\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/math/base/assert/is-nanf}\n*/\nimport isnanf from '@stdlib/math-base-assert-is-nanf';\nsetReadOnly( ns, 'isnanf', isnanf );\n\n/**\n* @name isNegativeFinite\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/math/base/assert/is-negative-finite}\n*/\nimport isNegativeFinite from '@stdlib/math-base-assert-is-negative-finite';\nsetReadOnly( ns, 'isNegativeFinite', isNegativeFinite );\n\n/**\n* @name isNegativeInteger\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/math/base/assert/is-negative-integer}\n*/\nimport isNegativeInteger from '@stdlib/math-base-assert-is-negative-integer';\nsetReadOnly( ns, 'isNegativeInteger', isNegativeInteger );\n\n/**\n* @name isNegativeZero\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/math/base/assert/is-negative-zero}\n*/\nimport isNegativeZero from '@stdlib/math-base-assert-is-negative-zero';\nsetReadOnly( ns, 'isNegativeZero', isNegativeZero );\n\n/**\n* @name isNegativeZerof\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/math/base/assert/is-negative-zerof}\n*/\nimport isNegativeZerof from '@stdlib/math-base-assert-is-negative-zerof';\nsetReadOnly( ns, 'isNegativeZerof', isNegativeZerof );\n\n/**\n* @name isNonNegativeFinite\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/math/base/assert/is-nonnegative-finite}\n*/\nimport isNonNegativeFinite from '@stdlib/math-base-assert-is-nonnegative-finite';\nsetReadOnly( ns, 'isNonNegativeFinite', isNonNegativeFinite );\n\n/**\n* @name isNonNegativeInteger\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/math/base/assert/is-nonnegative-integer}\n*/\nimport isNonNegativeInteger from '@stdlib/math-base-assert-is-nonnegative-integer';\nsetReadOnly( ns, 'isNonNegativeInteger', isNonNegativeInteger );\n\n/**\n* @name isNonPositiveFinite\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/math/base/assert/is-nonpositive-finite}\n*/\nimport isNonPositiveFinite from '@stdlib/math-base-assert-is-nonpositive-finite';\nsetReadOnly( ns, 'isNonPositiveFinite', isNonPositiveFinite );\n\n/**\n* @name isNonPositiveInteger\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/math/base/assert/is-nonpositive-integer}\n*/\nimport isNonPositiveInteger from '@stdlib/math-base-assert-is-nonpositive-integer';\nsetReadOnly( ns, 'isNonPositiveInteger', isNonPositiveInteger );\n\n/**\n* @name isOdd\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/math/base/assert/is-odd}\n*/\nimport isOdd from '@stdlib/math-base-assert-is-odd';\nsetReadOnly( ns, 'isOdd', isOdd );\n\n/**\n* @name isPositiveFinite\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/math/base/assert/is-positive-finite}\n*/\nimport isPositiveFinite from '@stdlib/math-base-assert-is-positive-finite';\nsetReadOnly( ns, 'isPositiveFinite', isPositiveFinite );\n\n/**\n* @name isPositiveInteger\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/math/base/assert/is-positive-integer}\n*/\nimport isPositiveInteger from '@stdlib/math-base-assert-is-positive-integer';\nsetReadOnly( ns, 'isPositiveInteger', isPositiveInteger );\n\n/**\n* @name isPositiveZero\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/math/base/assert/is-positive-zero}\n*/\nimport isPositiveZero from '@stdlib/math-base-assert-is-positive-zero';\nsetReadOnly( ns, 'isPositiveZero', isPositiveZero );\n\n/**\n* @name isPositiveZerof\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/math/base/assert/is-positive-zerof}\n*/\nimport isPositiveZerof from '@stdlib/math-base-assert-is-positive-zerof';\nsetReadOnly( ns, 'isPositiveZerof', isPositiveZerof );\n\n/**\n* @name isPrime\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/math/base/assert/is-prime}\n*/\nimport isPrime from '@stdlib/math-base-assert-is-prime';\nsetReadOnly( ns, 'isPrime', isPrime );\n\n/**\n* @name isProbability\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/math/base/assert/is-probability}\n*/\nimport isProbability from '@stdlib/math-base-assert-is-probability';\nsetReadOnly( ns, 'isProbability', isProbability );\n\n/**\n* @name isSafeInteger\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/math/base/assert/is-safe-integer}\n*/\nimport isSafeInteger from '@stdlib/math-base-assert-is-safe-integer';\nsetReadOnly( ns, 'isSafeInteger', isSafeInteger );\n\n/**\n* @name isPow2Uint32\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/math/base/assert/uint32-is-pow2}\n*/\nimport isPow2Uint32 from '@stdlib/math-base-assert-uint32-is-pow2';\nsetReadOnly( ns, 'isPow2Uint32', isPow2Uint32 );\n\n\n// EXPORTS //\n\nexport default ns;\n"],"names":["ns","setReadOnly","isEvenInt32","isOddInt32","isComposite","isCoprime","isEven","isFinite","isFinitef","isInfinite","isInfinitef","isInteger","isnan","isnanf","isNegativeFinite","isNegativeInteger","isNegativeZero","isNegativeZerof","isNonNegativeFinite","isNonNegativeInteger","isNonPositiveFinite","isNonPositiveInteger","isOdd","isPositiveFinite","isPositiveInteger","isPositiveZero","isPositiveZerof","isPrime","isProbability","isSafeInteger","isPow2Uint32"],"mappings":";;6uNAoCA,IAAAA,EAAA,CAAA,EAUAC,EAAAD,EAAA,cAAAE,GAUAD,EAAAD,EAAA,aAAAG,GAUAF,EAAAD,EAAA,cAAAI,GAUAH,EAAAD,EAAA,YAAAK,GAUAJ,EAAAD,EAAA,SAAAM,GAUAL,EAAAD,EAAA,WAAAO,GAUAN,EAAAD,EAAA,YAAAQ,GAUAP,EAAAD,EAAA,aAAAS,GAUAR,EAAAD,EAAA,cAAAU,GAUAT,EAAAD,EAAA,YAAAW,GAUAV,EAAAD,EAAA,QAAAY,GAUAX,EAAAD,EAAA,SAAAa,GAUAZ,EAAAD,EAAA,mBAAAc,GAUAb,EAAAD,EAAA,oBAAAe,GAUAd,EAAAD,EAAA,iBAAAgB,GAUAf,EAAAD,EAAA,kBAAAiB,GAUAhB,EAAAD,EAAA,sBAAAkB,GAUAjB,EAAAD,EAAA,uBAAAmB,GAUAlB,EAAAD,EAAA,sBAAAoB,GAUAnB,EAAAD,EAAA,uBAAAqB,GAUApB,EAAAD,EAAA,QAAAsB,GAUArB,EAAAD,EAAA,mBAAAuB,GAUAtB,EAAAD,EAAA,oBAAAwB,GAUAvB,EAAAD,EAAA,iBAAAyB,GAUAxB,EAAAD,EAAA,kBAAA0B,GAUAzB,EAAAD,EAAA,UAAA2B,GAUA1B,EAAAD,EAAA,gBAAA4B,GAUA3B,EAAAD,EAAA,gBAAA6B,GAUA5B,EAAAD,EAAA,eAAA8B"}